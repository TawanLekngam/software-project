generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id          String       @id @default(uuid())
  userId      String
  title       String       @db.Text
  description String?      @db.Text
  imageUrl    String?      @db.Text
  isPublished Boolean      @default(false)
  categoryId  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  category    Category?    @relation(fields: [categoryId], references: [id])
  chapters    Chapter[]
  attachments Attachment[]
  enrollments Enrollment[]

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]

  @@fulltext([name])
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String   @db.Text
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Chapter {
  id             String          @id @default(uuid())
  title          String
  description    String?         @db.Text
  position       Int
  isPublished    Boolean         @default(false)
  courseId       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  course         Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress   UserProgress[]
  flashcarddecks Flashcarddeck[]
  documents      Document[]
  questionSet    QuestionSet[]

  @@index([courseId])
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Flashcard {
  id              String        @id @default(uuid())
  front           String?       @db.Text
  back            String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  flashcarddeckId String
  flashcarddeck   Flashcarddeck @relation(fields: [flashcarddeckId], references: [id], onDelete: Cascade)

  @@index([flashcarddeckId])
  @@fulltext([front, back])
}

model Flashcarddeck {
  id         String      @id @default(uuid())
  title      String      @db.Text
  isPublic   Boolean     @default(false)
  chapterId  String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  chapter    Chapter     @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  flashcards Flashcard[]

  @@index([chapterId])
}

model Answer {
  id         String   @id @default(uuid())
  text       String?  @db.Text
  isCorrect  Boolean
  questionId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model Enrollment {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
}

model Question {
  id            String      @id @default(uuid())
  text          String?     @db.Text
  questionSetId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  questionSet   QuestionSet @relation(fields: [questionSetId], references: [id], onDelete: Cascade)
  answers       Answer[]

  @@index([questionSetId])
}

model QuestionSet {
  id          String     @id @default(uuid())
  title       String     @db.Text
  isPublished Boolean    @default(false)
  chapterId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  chapter     Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  Question    Question[]

  @@index([chapterId])
}

model Document {
  id          String   @id @default(uuid())
  url         String   @db.Text
  chapterId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublished Boolean  @default(false)
  title       String   @db.Text
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@index([chapterId])
}

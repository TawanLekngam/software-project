generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id          String       @id @default(uuid())
  userId      String
  title       String       @db.Text
  description String?      @db.Text
  imageUrl    String?      @db.Text
  isPublished Boolean      @default(false)
  categoryId  String?
  category    Category?    @relation(fields: [categoryId], references: [id])
  chapters    Chapter[]
  attachments Attachment[]
  enrollments  Enrollment[]
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String   @db.Text
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Chapter {
  id            String          @id @default(uuid())
  title         String
  description   String?         @db.Text
  position      Int
  isPublished   Boolean         @default(false)
  courseId      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  course        Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress  UserProgress[]
  FlashcardDeck FlashcardDeck[]
  Question      Question[]

  @@index([courseId])
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Flashcard {
  id              String        @id @default(uuid())
  front           String?       @db.Text
  back            String?       @db.Text
  flashcardDeckId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deck            FlashcardDeck @relation(fields: [flashcardDeckId], references: [id], onDelete: Cascade)

  @@index([flashcardDeckId])
  @@fulltext([front, back])
}

model FlashcardDeck {
  id        String      @id @default(uuid())
  title     String      @db.Text
  isPublic  Boolean     @default(false)
  chapterId String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  chapter   Chapter     @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  Flashcard Flashcard[]

  @@index([chapterId])
}

model Answer {
  id         String   @id @default(uuid())
  text       String   @db.Text
  isCorrect  Boolean
  questionId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([questionId])
}

model Enrollment {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model Question {
  id        String   @id @default(uuid())
  text      String   @db.Text
  chapterId String
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([chapterId])
}
